"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type AggregateComment {
  count: CommentCountAggregateOutputType
  avg: CommentAvgAggregateOutputType
  sum: CommentSumAggregateOutputType
  min: CommentMinAggregateOutputType
  max: CommentMaxAggregateOutputType
}

type AggregateGroup {
  count: GroupCountAggregateOutputType
  avg: GroupAvgAggregateOutputType
  sum: GroupSumAggregateOutputType
  min: GroupMinAggregateOutputType
  max: GroupMaxAggregateOutputType
}

type AggregatePost {
  count: PostCountAggregateOutputType
  avg: PostAvgAggregateOutputType
  sum: PostSumAggregateOutputType
  min: PostMinAggregateOutputType
  max: PostMaxAggregateOutputType
}

type AggregateProfile {
  count: ProfileCountAggregateOutputType
  avg: ProfileAvgAggregateOutputType
  sum: ProfileSumAggregateOutputType
  min: ProfileMinAggregateOutputType
  max: ProfileMaxAggregateOutputType
}

type AggregateUser {
  count: UserCountAggregateOutputType
  avg: UserAvgAggregateOutputType
  sum: UserSumAggregateOutputType
  min: UserMinAggregateOutputType
  max: UserMaxAggregateOutputType
}

type BatchPayload {
  count: Int!
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Comment {
  id: Int!
  contain: String!
  post: Post!
  postId: Int!
  author: User
  authorId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CommentAvgAggregateOutputType {
  id: Float!
  postId: Float!
  authorId: Float
}

type CommentCountAggregateOutputType {
  id: Int!
  contain: Int
  postId: Int!
  authorId: Int
  createdAt: Int
  updatedAt: Int
  _all: Int!
}

input CommentCreateInput {
  contain: String!
  createdAt: DateTime
  updatedAt: DateTime
  post: PostCreateOneWithoutCommentsInput!
  author: UserCreateOneWithoutCommentsInput
}

input CommentCreateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput]
  connect: [CommentWhereUniqueInput]
  connectOrCreate: [CommentCreateOrConnectWithoutauthorInput]
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput]
  connect: [CommentWhereUniqueInput]
  connectOrCreate: [CommentCreateOrConnectWithoutpostInput]
}

input CommentCreateOrConnectWithoutauthorInput {
  where: CommentWhereUniqueInput!
  create: CommentCreateWithoutAuthorInput!
}

input CommentCreateOrConnectWithoutpostInput {
  where: CommentWhereUniqueInput!
  create: CommentCreateWithoutPostInput!
}

input CommentCreateWithoutAuthorInput {
  contain: String!
  createdAt: DateTime
  updatedAt: DateTime
  post: PostCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutPostInput {
  contain: String!
  createdAt: DateTime
  updatedAt: DateTime
  author: UserCreateOneWithoutCommentsInput
}

input CommentListRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

type CommentMaxAggregateOutputType {
  id: Int!
  contain: String
  postId: Int!
  authorId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type CommentMinAggregateOutputType {
  id: Int!
  contain: String
  postId: Int!
  authorId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input CommentOrderByInput {
  id: SortOrder
  contain: SortOrder
  postId: SortOrder
  authorId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

enum CommentScalarFieldEnum {
  id
  contain
  postId
  authorId
  createdAt
  updatedAt
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput]
  OR: [CommentScalarWhereInput]
  NOT: [CommentScalarWhereInput]
  id: IntFilter
  contain: StringFilter
  postId: IntFilter
  authorId: IntNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

type CommentSumAggregateOutputType {
  id: Int!
  postId: Int!
  authorId: Int
}

input CommentUpdateInput {
  contain: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
  author: UserUpdateOneWithoutCommentsInput
}

input CommentUpdateManyMutationInput {
  contain: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput]
  connect: [CommentWhereUniqueInput]
  set: [CommentWhereUniqueInput]
  disconnect: [CommentWhereUniqueInput]
  delete: [CommentWhereUniqueInput]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput]
  updateMany: [CommentUpdateManyWithWhereWithoutAuthorInput]
  deleteMany: [CommentScalarWhereInput]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput]
  connectOrCreate: [CommentCreateOrConnectWithoutauthorInput]
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput]
  connect: [CommentWhereUniqueInput]
  set: [CommentWhereUniqueInput]
  disconnect: [CommentWhereUniqueInput]
  delete: [CommentWhereUniqueInput]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput]
  updateMany: [CommentUpdateManyWithWhereWithoutPostInput]
  deleteMany: [CommentScalarWhereInput]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput]
  connectOrCreate: [CommentCreateOrConnectWithoutpostInput]
}

input CommentUpdateManyWithWhereWithoutAuthorInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyMutationInput!
}

input CommentUpdateManyWithWhereWithoutPostInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyMutationInput!
}

input CommentUpdateWithoutAuthorInput {
  contain: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutPostInput {
  contain: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutAuthorInput!
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutAuthorInput!
  create: CommentCreateWithoutAuthorInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostInput!
  create: CommentCreateWithoutPostInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput]
  OR: [CommentWhereInput]
  NOT: [CommentWhereInput]
  id: IntFilter
  contain: StringFilter
  post: PostWhereInput
  postId: IntFilter
  author: UserWhereInput
  authorId: IntNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CommentWhereUniqueInput {
  id: Int
}

"""Date custom scalar type"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

type Group {
  id: Int!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  users(where: UserWhereInput, orderBy: UserOrderByInput, cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: UserScalarFieldEnum): [User!]!
}

type GroupAvgAggregateOutputType {
  id: Float!
}

type GroupCountAggregateOutputType {
  id: Int!
  name: Int
  createdAt: Int
  updatedAt: Int
  _all: Int!
}

input GroupCreateInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  users: UserCreateManyWithoutGroupInput
}

input GroupCreateOneWithoutUsersInput {
  create: GroupCreateWithoutUsersInput
  connect: GroupWhereUniqueInput
  connectOrCreate: GroupCreateOrConnectWithoutusersInput
}

input GroupCreateOrConnectWithoutusersInput {
  where: GroupWhereUniqueInput!
  create: GroupCreateWithoutUsersInput!
}

input GroupCreateWithoutUsersInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type GroupMaxAggregateOutputType {
  id: Int!
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type GroupMinAggregateOutputType {
  id: Int!
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

input GroupOrderByInput {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input GroupRelationFilter {
  is: GroupWhereInput
  isNot: GroupWhereInput
}

enum GroupScalarFieldEnum {
  id
  name
  createdAt
  updatedAt
}

type GroupSumAggregateOutputType {
  id: Int!
}

input GroupUpdateInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: UserUpdateManyWithoutGroupInput
}

input GroupUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GroupUpdateOneWithoutUsersInput {
  create: GroupCreateWithoutUsersInput
  connect: GroupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GroupUpdateWithoutUsersInput
  upsert: GroupUpsertWithoutUsersInput
  connectOrCreate: GroupCreateOrConnectWithoutusersInput
}

input GroupUpdateWithoutUsersInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GroupUpsertWithoutUsersInput {
  update: GroupUpdateWithoutUsersInput!
  create: GroupCreateWithoutUsersInput!
}

input GroupWhereInput {
  AND: [GroupWhereInput]
  OR: [GroupWhereInput]
  NOT: [GroupWhereInput]
  id: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  users: UserListRelationFilter
}

input GroupWhereUniqueInput {
  id: Int
}

input IntFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

"""Json custom scalar type"""
scalar Json

type Mutation {
  createOneComment(data: CommentCreateInput!): Comment!
  deleteManyComment(where: CommentWhereInput): BatchPayload!
  deleteOneComment(where: CommentWhereUniqueInput!): Comment
  updateManyComment(where: CommentWhereInput, data: CommentUpdateManyMutationInput!): BatchPayload!
  updateOneComment(where: CommentWhereUniqueInput!, data: CommentUpdateInput!): Comment!
  upsertOneComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  createOneGroup(data: GroupCreateInput!): Group!
  deleteManyGroup(where: GroupWhereInput): BatchPayload!
  deleteOneGroup(where: GroupWhereUniqueInput!): Group
  updateManyGroup(where: GroupWhereInput, data: GroupUpdateManyMutationInput!): BatchPayload!
  updateOneGroup(where: GroupWhereUniqueInput!, data: GroupUpdateInput!): Group!
  upsertOneGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  createOnePost(data: PostCreateInput!): Post!
  deleteManyPost(where: PostWhereInput): BatchPayload!
  deleteOnePost(where: PostWhereUniqueInput!): Post
  updateManyPost(where: PostWhereInput, data: PostUpdateManyMutationInput!): BatchPayload!
  updateOnePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post!
  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  createOneProfile(data: ProfileCreateInput!): Profile!
  deleteManyProfile(where: ProfileWhereInput): BatchPayload!
  deleteOneProfile(where: ProfileWhereUniqueInput!): Profile
  updateManyProfile(where: ProfileWhereInput, data: ProfileUpdateManyMutationInput!): BatchPayload!
  updateOneProfile(where: ProfileWhereUniqueInput!, data: ProfileUpdateInput!): Profile!
  upsertOneProfile(where: ProfileWhereUniqueInput!, create: ProfileCreateInput!, update: ProfileUpdateInput!): Profile!
  createOneUser(data: UserCreateInput!): User!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyUser(where: UserWhereInput, data: UserUpdateManyMutationInput!): BatchPayload!
  updateOneUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User!
  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedStringFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Post {
  id: Int!
  published: Boolean!
  title: String!
  author: User
  authorId: Int
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, cursor: CommentWhereUniqueInput, take: Int, skip: Int, distinct: CommentScalarFieldEnum): [Comment!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PostAvgAggregateOutputType {
  id: Float!
  authorId: Float
}

type PostCountAggregateOutputType {
  id: Int!
  published: Int
  title: Int
  authorId: Int
  createdAt: Int
  updatedAt: Int
  _all: Int!
}

input PostCreateInput {
  published: Boolean
  title: String!
  createdAt: DateTime
  updatedAt: DateTime
  author: UserCreateOneWithoutPostsInput
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput]
  connect: [PostWhereUniqueInput]
  connectOrCreate: [PostCreateOrConnectWithoutauthorInput]
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutcommentsInput
}

input PostCreateOrConnectWithoutauthorInput {
  where: PostWhereUniqueInput!
  create: PostCreateWithoutAuthorInput!
}

input PostCreateOrConnectWithoutcommentsInput {
  where: PostWhereUniqueInput!
  create: PostCreateWithoutCommentsInput!
}

input PostCreateWithoutAuthorInput {
  published: Boolean
  title: String!
  createdAt: DateTime
  updatedAt: DateTime
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateWithoutCommentsInput {
  published: Boolean
  title: String!
  createdAt: DateTime
  updatedAt: DateTime
  author: UserCreateOneWithoutPostsInput
}

input PostListRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

type PostMaxAggregateOutputType {
  id: Int!
  published: Boolean
  title: String
  authorId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type PostMinAggregateOutputType {
  id: Int!
  published: Boolean
  title: String
  authorId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input PostOrderByInput {
  id: SortOrder
  published: SortOrder
  title: SortOrder
  authorId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PostRelationFilter {
  is: PostWhereInput
  isNot: PostWhereInput
}

enum PostScalarFieldEnum {
  id
  published
  title
  authorId
  createdAt
  updatedAt
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput]
  OR: [PostScalarWhereInput]
  NOT: [PostScalarWhereInput]
  id: IntFilter
  published: BoolFilter
  title: StringFilter
  authorId: IntNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

type PostSumAggregateOutputType {
  id: Int!
  authorId: Int
}

input PostUpdateInput {
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateManyMutationInput {
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput]
  connect: [PostWhereUniqueInput]
  set: [PostWhereUniqueInput]
  disconnect: [PostWhereUniqueInput]
  delete: [PostWhereUniqueInput]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput]
  updateMany: [PostUpdateManyWithWhereWithoutAuthorInput]
  deleteMany: [PostScalarWhereInput]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput]
  connectOrCreate: [PostCreateOrConnectWithoutauthorInput]
}

input PostUpdateManyWithWhereWithoutAuthorInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyMutationInput!
}

input PostUpdateOneRequiredWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
  update: PostUpdateWithoutCommentsInput
  upsert: PostUpsertWithoutCommentsInput
  connectOrCreate: PostCreateOrConnectWithoutcommentsInput
}

input PostUpdateWithoutAuthorInput {
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateWithoutCommentsInput {
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutPostsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorInput!
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  AND: [PostWhereInput]
  OR: [PostWhereInput]
  NOT: [PostWhereInput]
  id: IntFilter
  published: BoolFilter
  title: StringFilter
  author: UserWhereInput
  authorId: IntNullableFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PostWhereUniqueInput {
  id: Int
}

type Profile {
  author: User!
  authorId: Int!
  bio: String!
}

type ProfileAvgAggregateOutputType {
  authorId: Float!
}

type ProfileCountAggregateOutputType {
  authorId: Int!
  bio: Int
  _all: Int!
}

input ProfileCreateInput {
  bio: String!
  author: UserCreateOneWithoutProfileInput!
}

input ProfileCreateOneWithoutAuthorInput {
  create: ProfileCreateWithoutAuthorInput
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutauthorInput
}

input ProfileCreateOrConnectWithoutauthorInput {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutAuthorInput!
}

input ProfileCreateWithoutAuthorInput {
  bio: String!
}

type ProfileMaxAggregateOutputType {
  authorId: Int!
  bio: String
}

type ProfileMinAggregateOutputType {
  authorId: Int!
  bio: String
}

input ProfileOrderByInput {
  authorId: SortOrder
  bio: SortOrder
}

input ProfileRelationFilter {
  is: ProfileWhereInput
  isNot: ProfileWhereInput
}

enum ProfileScalarFieldEnum {
  authorId
  bio
}

type ProfileSumAggregateOutputType {
  authorId: Int!
}

input ProfileUpdateInput {
  bio: StringFieldUpdateOperationsInput
  author: UserUpdateOneRequiredWithoutProfileInput
}

input ProfileUpdateManyMutationInput {
  bio: StringFieldUpdateOperationsInput
}

input ProfileUpdateOneWithoutAuthorInput {
  create: ProfileCreateWithoutAuthorInput
  connect: ProfileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProfileUpdateWithoutAuthorInput
  upsert: ProfileUpsertWithoutAuthorInput
  connectOrCreate: ProfileCreateOrConnectWithoutauthorInput
}

input ProfileUpdateWithoutAuthorInput {
  bio: StringFieldUpdateOperationsInput
}

input ProfileUpsertWithoutAuthorInput {
  update: ProfileUpdateWithoutAuthorInput!
  create: ProfileCreateWithoutAuthorInput!
}

input ProfileWhereInput {
  AND: [ProfileWhereInput]
  OR: [ProfileWhereInput]
  NOT: [ProfileWhereInput]
  author: UserWhereInput
  authorId: IntFilter
  bio: StringFilter
}

input ProfileWhereUniqueInput {
  authorId: Int
}

type Query {
  aggregateComment(where: CommentWhereInput, orderBy: [CommentOrderByInput], cursor: CommentWhereUniqueInput, distinct: CommentScalarFieldEnum, skip: Int, take: Int): AggregateComment
  findManyCommentCount(where: CommentWhereInput, orderBy: [CommentOrderByInput], cursor: CommentWhereUniqueInput, distinct: CommentScalarFieldEnum, skip: Int, take: Int): Int!
  findFirstComment(where: CommentWhereInput, orderBy: [CommentOrderByInput], cursor: CommentWhereUniqueInput, distinct: CommentScalarFieldEnum, skip: Int, take: Int): Comment
  findManyComment(where: CommentWhereInput, orderBy: [CommentOrderByInput], cursor: CommentWhereUniqueInput, distinct: CommentScalarFieldEnum, skip: Int, take: Int): [Comment!]!
  findUniqueComment(where: CommentWhereUniqueInput): Comment
  aggregateGroup(where: GroupWhereInput, orderBy: [GroupOrderByInput], cursor: GroupWhereUniqueInput, distinct: GroupScalarFieldEnum, skip: Int, take: Int): AggregateGroup
  findManyGroupCount(where: GroupWhereInput, orderBy: [GroupOrderByInput], cursor: GroupWhereUniqueInput, distinct: GroupScalarFieldEnum, skip: Int, take: Int): Int!
  findFirstGroup(where: GroupWhereInput, orderBy: [GroupOrderByInput], cursor: GroupWhereUniqueInput, distinct: GroupScalarFieldEnum, skip: Int, take: Int): Group
  findManyGroup(where: GroupWhereInput, orderBy: [GroupOrderByInput], cursor: GroupWhereUniqueInput, distinct: GroupScalarFieldEnum, skip: Int, take: Int): [Group!]!
  findUniqueGroup(where: GroupWhereUniqueInput): Group
  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByInput], cursor: PostWhereUniqueInput, distinct: PostScalarFieldEnum, skip: Int, take: Int): AggregatePost
  findManyPostCount(where: PostWhereInput, orderBy: [PostOrderByInput], cursor: PostWhereUniqueInput, distinct: PostScalarFieldEnum, skip: Int, take: Int): Int!
  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByInput], cursor: PostWhereUniqueInput, distinct: PostScalarFieldEnum, skip: Int, take: Int): Post
  findManyPost(where: PostWhereInput, orderBy: [PostOrderByInput], cursor: PostWhereUniqueInput, distinct: PostScalarFieldEnum, skip: Int, take: Int): [Post!]!
  findUniquePost(where: PostWhereUniqueInput): Post
  aggregateProfile(where: ProfileWhereInput, orderBy: [ProfileOrderByInput], cursor: ProfileWhereUniqueInput, distinct: ProfileScalarFieldEnum, skip: Int, take: Int): AggregateProfile
  findManyProfileCount(where: ProfileWhereInput, orderBy: [ProfileOrderByInput], cursor: ProfileWhereUniqueInput, distinct: ProfileScalarFieldEnum, skip: Int, take: Int): Int!
  findFirstProfile(where: ProfileWhereInput, orderBy: [ProfileOrderByInput], cursor: ProfileWhereUniqueInput, distinct: ProfileScalarFieldEnum, skip: Int, take: Int): Profile
  findManyProfile(where: ProfileWhereInput, orderBy: [ProfileOrderByInput], cursor: ProfileWhereUniqueInput, distinct: ProfileScalarFieldEnum, skip: Int, take: Int): [Profile!]!
  findUniqueProfile(where: ProfileWhereUniqueInput): Profile
  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByInput], cursor: UserWhereUniqueInput, distinct: UserScalarFieldEnum, skip: Int, take: Int): AggregateUser
  findManyUserCount(where: UserWhereInput, orderBy: [UserOrderByInput], cursor: UserWhereUniqueInput, distinct: UserScalarFieldEnum, skip: Int, take: Int): Int!
  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByInput], cursor: UserWhereUniqueInput, distinct: UserScalarFieldEnum, skip: Int, take: Int): User
  findManyUser(where: UserWhereInput, orderBy: [UserOrderByInput], cursor: UserWhereUniqueInput, distinct: UserScalarFieldEnum, skip: Int, take: Int): [User!]!
  findUniqueUser(where: UserWhereUniqueInput): User
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

type User {
  id: Int!
  createdAt: DateTime!
  email: String!
  name: String
  password: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: PostScalarFieldEnum): [Post!]!
  profile: Profile
  group: Group
  groupId: Int
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, cursor: CommentWhereUniqueInput, take: Int, skip: Int, distinct: CommentScalarFieldEnum): [Comment!]!
}

type UserAvgAggregateOutputType {
  id: Float!
  groupId: Float
}

type UserCountAggregateOutputType {
  id: Int!
  createdAt: Int
  email: Int
  name: Int
  password: Int
  groupId: Int
  _all: Int!
}

input UserCreateInput {
  createdAt: DateTime
  email: String!
  name: String
  password: String!
  posts: PostCreateManyWithoutAuthorInput
  profile: ProfileCreateOneWithoutAuthorInput
  group: GroupCreateOneWithoutUsersInput
  comments: CommentCreateManyWithoutAuthorInput
}

input UserCreateManyWithoutGroupInput {
  create: [UserCreateWithoutGroupInput]
  connect: [UserWhereUniqueInput]
  connectOrCreate: [UserCreateOrConnectWithoutgroupInput]
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutcommentsInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutpostsInput
}

input UserCreateOneWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutprofileInput
}

input UserCreateOrConnectWithoutcommentsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutCommentsInput!
}

input UserCreateOrConnectWithoutgroupInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutGroupInput!
}

input UserCreateOrConnectWithoutpostsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutPostsInput!
}

input UserCreateOrConnectWithoutprofileInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutProfileInput!
}

input UserCreateWithoutCommentsInput {
  createdAt: DateTime
  email: String!
  name: String
  password: String!
  posts: PostCreateManyWithoutAuthorInput
  profile: ProfileCreateOneWithoutAuthorInput
  group: GroupCreateOneWithoutUsersInput
}

input UserCreateWithoutGroupInput {
  createdAt: DateTime
  email: String!
  name: String
  password: String!
  posts: PostCreateManyWithoutAuthorInput
  profile: ProfileCreateOneWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
}

input UserCreateWithoutPostsInput {
  createdAt: DateTime
  email: String!
  name: String
  password: String!
  profile: ProfileCreateOneWithoutAuthorInput
  group: GroupCreateOneWithoutUsersInput
  comments: CommentCreateManyWithoutAuthorInput
}

input UserCreateWithoutProfileInput {
  createdAt: DateTime
  email: String!
  name: String
  password: String!
  posts: PostCreateManyWithoutAuthorInput
  group: GroupCreateOneWithoutUsersInput
  comments: CommentCreateManyWithoutAuthorInput
}

input UserListRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

type UserMaxAggregateOutputType {
  id: Int!
  createdAt: DateTime
  email: String
  name: String
  password: String
  groupId: Int
}

type UserMinAggregateOutputType {
  id: Int!
  createdAt: DateTime
  email: String
  name: String
  password: String
  groupId: Int
}

input UserOrderByInput {
  id: SortOrder
  createdAt: SortOrder
  email: SortOrder
  name: SortOrder
  password: SortOrder
  groupId: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  id
  createdAt
  email
  name
  password
  groupId
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput]
  OR: [UserScalarWhereInput]
  NOT: [UserScalarWhereInput]
  id: IntFilter
  createdAt: DateTimeFilter
  email: StringFilter
  name: StringNullableFilter
  password: StringFilter
  groupId: IntNullableFilter
}

type UserSumAggregateOutputType {
  id: Int!
  groupId: Int
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  profile: ProfileUpdateOneWithoutAuthorInput
  group: GroupUpdateOneWithoutUsersInput
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input UserUpdateManyWithoutGroupInput {
  create: [UserCreateWithoutGroupInput]
  connect: [UserWhereUniqueInput]
  set: [UserWhereUniqueInput]
  disconnect: [UserWhereUniqueInput]
  delete: [UserWhereUniqueInput]
  update: [UserUpdateWithWhereUniqueWithoutGroupInput]
  updateMany: [UserUpdateManyWithWhereWithoutGroupInput]
  deleteMany: [UserScalarWhereInput]
  upsert: [UserUpsertWithWhereUniqueWithoutGroupInput]
  connectOrCreate: [UserCreateOrConnectWithoutgroupInput]
}

input UserUpdateManyWithWhereWithoutGroupInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyMutationInput!
}

input UserUpdateOneRequiredWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutProfileInput
  upsert: UserUpsertWithoutProfileInput
  connectOrCreate: UserCreateOrConnectWithoutprofileInput
}

input UserUpdateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutCommentsInput
  upsert: UserUpsertWithoutCommentsInput
  connectOrCreate: UserCreateOrConnectWithoutcommentsInput
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
  connectOrCreate: UserCreateOrConnectWithoutpostsInput
}

input UserUpdateWithoutCommentsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  profile: ProfileUpdateOneWithoutAuthorInput
  group: GroupUpdateOneWithoutUsersInput
}

input UserUpdateWithoutGroupInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  profile: ProfileUpdateOneWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutPostsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutAuthorInput
  group: GroupUpdateOneWithoutUsersInput
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutProfileInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  group: GroupUpdateOneWithoutUsersInput
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpdateWithWhereUniqueWithoutGroupInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutGroupInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithoutProfileInput {
  update: UserUpdateWithoutProfileInput!
  create: UserCreateWithoutProfileInput!
}

input UserUpsertWithWhereUniqueWithoutGroupInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutGroupInput!
  create: UserCreateWithoutGroupInput!
}

input UserWhereInput {
  AND: [UserWhereInput]
  OR: [UserWhereInput]
  NOT: [UserWhereInput]
  id: IntFilter
  createdAt: DateTimeFilter
  email: StringFilter
  name: StringNullableFilter
  password: StringFilter
  posts: PostListRelationFilter
  profile: ProfileWhereInput
  group: GroupWhereInput
  groupId: IntNullableFilter
  comments: CommentListRelationFilter
}

input UserWhereUniqueInput {
  id: Int
  email: String
}

